
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.23.0
 * Query Engine version: adf5e8cba3daf12d456d911d72b6e9418681b28b
 */
Prisma.prismaVersion = {
  client: "2.23.0",
  engine: "adf5e8cba3daf12d456d911d72b6e9418681b28b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.EventTypeScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  locations: 'locations',
  length: 'length',
  hidden: 'hidden',
  userId: 'userId',
  eventName: 'eventName'
});

exports.Prisma.CredentialScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  key: 'key',
  userId: 'userId'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  bio: 'bio',
  avatar: 'avatar',
  timeZone: 'timeZone',
  weekStart: 'weekStart',
  startTime: 'startTime',
  endTime: 'endTime',
  bufferTime: 'bufferTime',
  createdDate: 'createdDate'
});

exports.Prisma.TeamScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.MembershipScalarFieldEnum = makeEnum({
  teamId: 'teamId',
  userId: 'userId',
  accepted: 'accepted',
  role: 'role'
});

exports.Prisma.VerificationRequestScalarFieldEnum = makeEnum({
  id: 'id',
  identifier: 'identifier',
  token: 'token',
  expires: 'expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.BookingReferenceScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  uid: 'uid',
  bookingId: 'bookingId'
});

exports.Prisma.AttendeeScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  name: 'name',
  timeZone: 'timeZone',
  bookingId: 'bookingId'
});

exports.Prisma.BookingScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  userId: 'userId',
  eventTypeId: 'eventTypeId',
  title: 'title',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SelectedCalendarScalarFieldEnum = makeEnum({
  userId: 'userId',
  integration: 'integration',
  externalId: 'externalId'
});

exports.Prisma.EventTypeCustomInputScalarFieldEnum = makeEnum({
  id: 'id',
  eventTypeId: 'eventTypeId',
  label: 'label',
  type: 'type',
  required: 'required'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.MembershipRole = makeEnum({
  MEMBER: 'MEMBER',
  OWNER: 'OWNER'
});

exports.Prisma.ModelName = makeEnum({
  EventType: 'EventType',
  Credential: 'Credential',
  User: 'User',
  Team: 'Team',
  Membership: 'Membership',
  VerificationRequest: 'VerificationRequest',
  BookingReference: 'BookingReference',
  Attendee: 'Attendee',
  Booking: 'Booking',
  SelectedCalendar: 'SelectedCalendar',
  EventTypeCustomInput: 'EventTypeCustomInput'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
